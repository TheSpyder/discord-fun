// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function safelyCalculate(left, op, right) {
  var fLeft = Number(left);
  var fRight = Number(right);
  var tmp;
  switch (op) {
    case "*" : 
        tmp = fLeft * fRight;
        break;
    case "+" : 
        tmp = fLeft + fRight;
        break;
    case "-" : 
        tmp = fLeft - fRight;
        break;
    case "/" : 
        tmp = fLeft / fRight;
        break;
    default:
      throw [
            Caml_builtin_exceptions.failure,
            "Unknown operator " + op
          ];
  }
  return tmp.toString();
}

function calculate(_ops) {
  while(true) {
    var ops = _ops;
    if (ops) {
      if (List.length(ops) % 2 === 0) {
        return "ERROR: argument mismatch";
      } else {
        var match = ops[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var exit = 0;
            var val;
            var val$1;
            try {
              val = safelyCalculate(ops[0], match[0], match$1[0]);
              val$1 = match$1[1];
              exit = 1;
            }
            catch (raw_exn){
              var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
              if (exn[0] === Caml_builtin_exceptions.failure) {
                var a = exn[1];
                if (a === "float_of_string") {
                  return "Parse error in calculation argument";
                } else {
                  return a;
                }
              } else {
                throw exn;
              }
            }
            if (exit === 1) {
              if (val$1) {
                _ops = /* :: */[
                  val,
                  val$1
                ];
                continue ;
              } else {
                return val;
              }
            }
            
          } else {
            return "Unhandled calcuation: " + $$String.concat("", ops);
          }
        } else {
          return "Unhandled calcuation: " + $$String.concat("", ops);
        }
      }
    } else {
      return "Error: No operations";
    }
  };
}

exports.safelyCalculate = safelyCalculate;
exports.calculate = calculate;
/* No side effect */
